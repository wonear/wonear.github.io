<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>鸿蒙开发-swiper组件沉浸式实现</title>
    <link href="/2025/02/22/%E2%80%9C%E9%B8%BF%E8%92%99%E5%BC%80%E5%8F%91-swiper%E7%BB%84%E4%BB%B6%E6%B2%89%E6%B5%B8%E5%BC%8F%E5%AE%9E%E7%8E%B0%E2%80%9D/"/>
    <url>/2025/02/22/%E2%80%9C%E9%B8%BF%E8%92%99%E5%BC%80%E5%8F%91-swiper%E7%BB%84%E4%BB%B6%E6%B2%89%E6%B5%B8%E5%BC%8F%E5%AE%9E%E7%8E%B0%E2%80%9D/</url>
    
    <content type="html"><![CDATA[<p>Swiper内图片通过expandSafeArea实现沉浸式，可以给Swiper设置宽高比，给图片宽高设置沾满100%，来避免Swiper底部异常的问题。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">export</span> struct <span class="hljs-title class_">SwiperPage</span> &#123;<br>  <span class="hljs-meta">@State</span> <span class="hljs-attr">param</span>?: <span class="hljs-title class_">BannerList</span>[] = []<br><br>  <span class="hljs-title function_">aboutToAppear</span>(): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">param</span> = <span class="hljs-title class_">HMRouterMgr</span>.<span class="hljs-title function_">getCurrentParam</span>() <span class="hljs-keyword">as</span> <span class="hljs-title class_">BannerList</span>[]<br>  &#125;<br><br>  <span class="hljs-meta">@Builder</span><br>  <span class="hljs-title function_">buildImage</span>(<span class="hljs-params"><span class="hljs-attr">param</span>: <span class="hljs-title class_">BannerList</span></span>) &#123;<br>    <span class="hljs-title class_">Image</span>(param?.<span class="hljs-property">imageURL</span>)<br>      .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)<br>      .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)<br>      .<span class="hljs-title function_">objectFit</span>(<span class="hljs-title class_">ImageFit</span>.<span class="hljs-property">Cover</span>)<br>      .<span class="hljs-title function_">expandSafeArea</span>([<span class="hljs-title class_">SafeAreaType</span>.<span class="hljs-property">SYSTEM</span>], [<span class="hljs-title class_">SafeAreaEdge</span>.<span class="hljs-property">TOP</span>])<br>  &#125;<br><br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-title class_">Swiper</span>() &#123;<br>      <span class="hljs-title class_">ForEach</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">param</span>, <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">item</span>: <span class="hljs-title class_">BannerList</span></span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">buildImage</span>(item)<br>      &#125;)<br>    &#125;<br>    .<span class="hljs-title function_">width</span>(<span class="hljs-string">&quot;100%&quot;</span>)<br>    .<span class="hljs-title function_">aspectRatio</span>(<span class="hljs-number">16</span>/<span class="hljs-number">9</span>)<br>    .<span class="hljs-title function_">autoPlay</span>(<span class="hljs-literal">true</span>)<br>    .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Blue</span>)<br>    .<span class="hljs-title function_">indicator</span>(<span class="hljs-title class_">DotIndicator</span>.<span class="hljs-title function_">dot</span>()<br>      .<span class="hljs-title function_">itemWidth</span>(<span class="hljs-number">8</span>)<br>      .<span class="hljs-title function_">itemHeight</span>(<span class="hljs-number">3</span>)<br>      .<span class="hljs-title function_">selectedItemWidth</span>(<span class="hljs-number">8</span>)<br>      .<span class="hljs-title function_">selectedItemHeight</span>(<span class="hljs-number">3</span>)<br>      .<span class="hljs-title function_">selectedColor</span>($r(<span class="hljs-string">&#x27;app.color.color_green&#x27;</span>))<br>      .<span class="hljs-title function_">color</span>($r(<span class="hljs-string">&#x27;app.color.color_gray&#x27;</span>)))<br>    .<span class="hljs-title function_">clip</span>(<span class="hljs-literal">false</span>)<br>    .<span class="hljs-title function_">expandSafeArea</span>([<span class="hljs-title class_">SafeAreaType</span>.<span class="hljs-property">SYSTEM</span>], [<span class="hljs-title class_">SafeAreaEdge</span>.<span class="hljs-property">TOP</span>])<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/hm_cjs.png" alt="效果实现"></p>]]></content>
    
    
    <categories>
      
      <category>harmony</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Android开发-设计模式kotlin版</title>
    <link href="/2025/01/20/Android%E5%BC%80%E5%8F%91-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8Fkotlin%E7%89%88/"/>
    <url>/2025/01/20/Android%E5%BC%80%E5%8F%91-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8Fkotlin%E7%89%88/</url>
    
    <content type="html"><![CDATA[<ul><li><h2 id="单例模式（Singleton）"><a href="#单例模式（Singleton）" class="headerlink" title="单例模式（Singleton）"></a>单例模式（Singleton）</h2><p>kotlin中提供了语法糖实现单例模式，使用<strong>object</strong>关键字可以轻松实现<strong>线程安全懒加载</strong>的单例模式</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">object</span> Singleton &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-comment">//kotlin类中的调用方式</span><br>Singleton.doSomething()<br><span class="hljs-comment">//如果在java和kotlin混用的项目中，java中的调用方式为</span><br>Singleton.INSTANCE.doSomething()<br><br></code></pre></td></tr></table></figure><p>kotlin 中的 <code>object</code> 单例会在首次使用时初始化，而不是在程序启动时就创建</p><p>或者想要自己写可以这样：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">constructor</span>() &#123;<br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;<br>        <span class="hljs-keyword">val</span> instance: Singleton <span class="hljs-keyword">by</span> lazy &#123;<br>            Singleton()<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 <code>by lazy</code> 使单例在首次使用时才会被初始化，这也是线程安全的一种实现单例的方式。</p><p>双重检查锁的方式实现单例模式：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">constructor</span>() &#123;<br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;<br>        <span class="hljs-meta">@Volatile</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> instance: Singleton? = <span class="hljs-literal">null</span><br><br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>: Singleton &#123;<br>            <span class="hljs-keyword">return</span> instance ?: synchronized(<span class="hljs-keyword">this</span>) &#123;<br>                instance ?: Singleton().also &#123; instance = it &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>使用同步锁避免了对象的重复创建，但是因为使用了锁会有额外的开销，java中使用静态内部类的方式实现单例，避免了同步锁带来的额外开销，实现懒加载，同时，Java 的类加载机制保证了 <strong>静态内部类只会被加载一次</strong>，也就是说，是线程安全的，可以说是java中最优雅的实现方式。但是在kotlin中前面两种已经非常优雅了，没必要再照搬java的写法，这边列举使用双重检查锁，也只是情怀，拿来对比一下。</p></li><li><h2 id="工厂模式（Factory-Method）"><a href="#工厂模式（Factory-Method）" class="headerlink" title="工厂模式（Factory Method）"></a>工厂模式（Factory Method）</h2><p>工厂方法模式（Factory Method Pattern）是一种创建型设计模式，它提供了一个创建对象的接口，让子类    决定实例化哪一个类。工厂方法模式将对象的实例化延迟到子类去实现，因此，客户端代码无需关心具体如    何创建对象，只需要依赖于抽象的工厂方法即可。</p><p>例如我们配合RecyclerView实现多个viewholder的实现</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ViewHolderFactory</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">createViewHolder</span><span class="hljs-params">(parent: <span class="hljs-type">ViewGroup</span>, viewType: <span class="hljs-type">Int</span>)</span></span>: RecyclerView.ViewHolder<br>&#125;<br><br><span class="hljs-comment">//文字类型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TextViewHolderFactory</span> : <span class="hljs-type">ViewHolderFactory</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">createViewHolder</span><span class="hljs-params">(parent: <span class="hljs-type">ViewGroup</span>, viewType: <span class="hljs-type">Int</span>)</span></span>: RecyclerView.ViewHolder &#123;<br>        <span class="hljs-keyword">val</span> itemView = LayoutInflater.from(parent.context).inflate(R.layout.item_text, parent, <span class="hljs-literal">false</span>)<br>        <span class="hljs-keyword">return</span> TextViewHolder(itemView)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//图片类型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageViewHolderFactory</span> : <span class="hljs-type">ViewHolderFactory</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">createViewHolder</span><span class="hljs-params">(parent: <span class="hljs-type">ViewGroup</span>, viewType: <span class="hljs-type">Int</span>)</span></span>: RecyclerView.ViewHolder &#123;<br>        <span class="hljs-keyword">val</span> itemView = LayoutInflater.from(parent.context).inflate(R.layout.item_image, parent, <span class="hljs-literal">false</span>)<br>        <span class="hljs-keyword">return</span> ImageViewHolder(itemView)<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAdapter</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> items: List&lt;Item&gt;) : RecyclerView.Adapter&lt;RecyclerView.ViewHolder&gt;() &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> viewHolderFactories: Map&lt;<span class="hljs-built_in">Int</span>, ViewHolderFactory&gt; = mapOf(<br>        ItemType.TEXT to TextViewHolderFactory(),<br>        ItemType.IMAGE to ImageViewHolderFactory()<br>    )<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getItemViewType</span><span class="hljs-params">(position: <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Int</span> &#123;<br>        <span class="hljs-keyword">return</span> items[position].type<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreateViewHolder</span><span class="hljs-params">(parent: <span class="hljs-type">ViewGroup</span>, viewType: <span class="hljs-type">Int</span>)</span></span>: RecyclerView.ViewHolder &#123;<br>        <span class="hljs-keyword">val</span> factory = viewHolderFactories[viewType]<br>        <span class="hljs-keyword">return</span> factory?.createViewHolder(parent, viewType) ?: <span class="hljs-keyword">throw</span> IllegalArgumentException(<span class="hljs-string">&quot;Invalid view type&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onBindViewHolder</span><span class="hljs-params">(holder: <span class="hljs-type">RecyclerView</span>.<span class="hljs-type">ViewHolder</span>, position: <span class="hljs-type">Int</span>)</span></span> &#123;<br>        <span class="hljs-keyword">val</span> item = items[position]<br>        <span class="hljs-keyword">when</span> (holder) &#123;<br>            <span class="hljs-keyword">is</span> TextViewHolder -&gt; holder.bind(item.text)<br>            <span class="hljs-keyword">is</span> ImageViewHolder -&gt; holder.bind(item.imageUrl)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getItemCount</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Int</span> &#123;<br>        <span class="hljs-keyword">return</span> items.size<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在im相关的功能开发中，这种方式很常见，用来区分各种不同的聊天消息，文本、图片、视频、红包等等，把每种消息类型都分开处理，定义相同的接口，可以更加方便代码的管理，代码清晰并且有更好的拓展性。</p><p>类似的使用场景还有很多，比如自定义图表，折线图、饼状图；比如日历模块的周试图、月视图等等。</p></li><li><h2 id="建造者模式（Builder）"><a href="#建造者模式（Builder）" class="headerlink" title="建造者模式（Builder）"></a>建造者模式（Builder）</h2><p><strong>建造者模式（Builder Pattern）</strong> 是一种创建型设计模式，它允许通过多个步骤来构建一个复杂的对象。与直接通过构造函数或工厂方法创建对象不同，建造者模式将对象的构建过程与表示分离，使得同样的构建过程可以创建不同的表示。</p><p>在与后端的交互中，经常需要提交body类型的数据，提交的参数个数位置，简单封装了一个，实现多个动态文本参数的构建，最后统一构建返回RequestBody，上传给服务端</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><br><span class="hljs-keyword">import</span> com.android.base.utils.JsonUtil.Companion.moderToJsonObject<br><span class="hljs-keyword">import</span> com.android.base.utils.JsonUtil.Companion.stringToJson<br><span class="hljs-keyword">import</span> com.google.gson.JsonArray<br><span class="hljs-keyword">import</span> com.google.gson.JsonObject<br><span class="hljs-keyword">import</span> okhttp3.MediaType.Companion.toMediaTypeOrNull<br><span class="hljs-keyword">import</span> okhttp3.RequestBody<br><span class="hljs-keyword">import</span> okhttp3.RequestBody.Companion.toRequestBody<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BodyBuilder</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">constructor</span>() &#123;<br>    <span class="hljs-keyword">val</span> jsonObject: JsonObject = JsonObject()<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> methodName: String? = <span class="hljs-literal">null</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">addParam</span><span class="hljs-params">(key: <span class="hljs-type">String</span>, value: <span class="hljs-type">Int</span>)</span></span>: BodyBuilder &#123;<br>        jsonObject.addProperty(key, value)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">addParam</span><span class="hljs-params">(key: <span class="hljs-type">String</span>, value: <span class="hljs-type">Long</span>?)</span></span>: BodyBuilder &#123;<br>        jsonObject.addProperty(key, value)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">addParam</span><span class="hljs-params">(key: <span class="hljs-type">String</span>, value: <span class="hljs-type">String</span>?)</span></span>: BodyBuilder &#123;<br>        jsonObject.addProperty(key, value)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">addParam</span><span class="hljs-params">(key: <span class="hljs-type">String</span>, value: <span class="hljs-type">JsonObject</span>?)</span></span>: BodyBuilder &#123;<br>        jsonObject.add(key, value)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">addParam</span><span class="hljs-params">(key: <span class="hljs-type">String</span>, value: <span class="hljs-type">JsonArray</span>?)</span></span>: BodyBuilder &#123;<br>        jsonObject.add(key, value)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">addJsonParam</span><span class="hljs-params">(json: <span class="hljs-type">JsonObject</span>)</span></span>: BodyBuilder &#123;<br>        <span class="hljs-keyword">val</span> keys = json.keySet()<br>        <span class="hljs-keyword">val</span> var3: Iterator&lt;*&gt; = keys.iterator()<br><br>        <span class="hljs-keyword">while</span> (var3.hasNext()) &#123;<br>            <span class="hljs-keyword">val</span> key = var3.next() <span class="hljs-keyword">as</span> String<br>            jsonObject.add(key, json[key])<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">addJsonParam</span><span class="hljs-params">(str: <span class="hljs-type">String</span>?)</span></span>: BodyBuilder &#123;<br>        <span class="hljs-keyword">val</span> `<span class="hljs-keyword">object</span>` = stringToJson(str)<br>        <span class="hljs-keyword">val</span> keys = `<span class="hljs-keyword">object</span>`.keySet()<br>        <span class="hljs-keyword">val</span> var4: Iterator&lt;*&gt; = keys.iterator()<br><br>        <span class="hljs-keyword">while</span> (var4.hasNext()) &#123;<br>            <span class="hljs-keyword">val</span> key = var4.next() <span class="hljs-keyword">as</span> String<br>            jsonObject.add(key, `<span class="hljs-keyword">object</span>`[key])<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">addModelParam</span><span class="hljs-params">(model: <span class="hljs-type">Any</span>?)</span></span>: BodyBuilder &#123;<br>        <span class="hljs-keyword">val</span> `<span class="hljs-keyword">object</span>` = moderToJsonObject(model)<br>        <span class="hljs-keyword">val</span> keys = `<span class="hljs-keyword">object</span>`.keySet()<br>        <span class="hljs-keyword">val</span> var4: Iterator&lt;*&gt; = keys.iterator()<br><br>        <span class="hljs-keyword">while</span> (var4.hasNext()) &#123;<br>            <span class="hljs-keyword">val</span> key = var4.next() <span class="hljs-keyword">as</span> String<br>            jsonObject.add(key, `<span class="hljs-keyword">object</span>`[key])<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">build</span><span class="hljs-params">()</span></span>: RequestBody &#123;<br>        <span class="hljs-keyword">return</span>  jsonObject.toString().toRequestBody(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>.toMediaTypeOrNull())<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">buildText</span><span class="hljs-params">(text: <span class="hljs-type">String</span>)</span></span>: RequestBody &#123;<br>        <span class="hljs-keyword">return</span> text.toRequestBody(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>.toMediaTypeOrNull())<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">page</span><span class="hljs-params">(currentPage: <span class="hljs-type">Int</span>, pageSize: <span class="hljs-type">Int</span>)</span></span>: BodyBuilder &#123;<br>        jsonObject.addProperty(<span class="hljs-string">&quot;currentPage&quot;</span>, currentPage)<br>        jsonObject.addProperty(<span class="hljs-string">&quot;pageSize&quot;</span>, pageSize)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span><br>    &#125;<br><br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">newBuilder</span><span class="hljs-params">()</span></span>: BodyBuilder &#123;<br>            <span class="hljs-keyword">return</span> BodyBuilder()<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h2 id="原型模式（Prototype）"><a href="#原型模式（Prototype）" class="headerlink" title="原型模式（Prototype）"></a>原型模式（Prototype）</h2><p>是一种创建型设计模式，目的是通过复制现有的对象来创建新的对象，而不是通过重新实例化。原型模式通过复制现有实例的方式，可以避免大量重复的构造过程，尤其适用于创建多个具有相似属性的对象。</p><p><em><strong>在 Kotlin 中，你可以使用 copy() 方法来实现数据类的浅拷贝</strong></em></p><p>原型模式主要用于创建对象的场景，特别是在对象构建比较复杂时，可以通过原型模式有效简化创建过程。对于需要频繁生成类似对象的系统，原型模式能够提高效率、减少冗余代码。</p><ol><li><strong>Prototype（原型）接口</strong>：<ul><li>定义一个接口，声明一个克隆方法，通常是 <code>clone()</code>。</li></ul></li><li><strong>ConcretePrototype（具体原型）</strong>：<ul><li>实现 <code>Prototype</code> 接口，提供具体的 <code>clone()</code> 方法，返回一个当前对象的克隆。</li></ul></li><li><strong>Client（客户端）</strong>：<ul><li>通过调用 <code>clone()</code> 方法来创建新的对象，而不是通过构造函数。</li></ul></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Prototype</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">clone</span><span class="hljs-params">()</span></span>: Prototype<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Character</span>(<br>    <span class="hljs-keyword">val</span> name: String,<br>    <span class="hljs-keyword">val</span> health: <span class="hljs-built_in">Int</span>,<br>    <span class="hljs-keyword">val</span> attack: <span class="hljs-built_in">Int</span><br>) : Prototype &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">clone</span><span class="hljs-params">()</span></span>: Character &#123;<br>        <span class="hljs-comment">// 返回当前对象的副本</span><br>        <span class="hljs-keyword">return</span> Character(name, health, attack)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>: String &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Character(name=&#x27;<span class="hljs-variable">$name</span>&#x27;, health=<span class="hljs-variable">$health</span>, attack=<span class="hljs-variable">$attack</span>)&quot;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 创建一个原始角色</span><br>    <span class="hljs-keyword">val</span> originalCharacter = Character(<span class="hljs-string">&quot;Warrior&quot;</span>, <span class="hljs-number">100</span>, <span class="hljs-number">20</span>)<br>    println(<span class="hljs-string">&quot;Original character: <span class="hljs-variable">$originalCharacter</span>&quot;</span>)<br><br>    <span class="hljs-comment">// 通过克隆来创建新的角色对象</span><br>    <span class="hljs-keyword">val</span> clonedCharacter = originalCharacter.clone()<br>    println(<span class="hljs-string">&quot;Cloned character: <span class="hljs-variable">$clonedCharacter</span>&quot;</span>)<br><br>    <span class="hljs-comment">// 修改克隆对象的属性</span><br>    <span class="hljs-keyword">val</span> modifiedCharacter = clonedCharacter.apply &#123;<br>        <span class="hljs-comment">// 改变名字</span><br>        name = <span class="hljs-string">&quot;Knight&quot;</span><br>    &#125;<br>    println(<span class="hljs-string">&quot;Modified cloned character: <span class="hljs-variable">$modifiedCharacter</span>&quot;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>优点</p><ol><li><strong>性能优越</strong>：通过复制现有对象来创建新的对象，而不是通过构造过程，性能较高。</li><li><strong>灵活性</strong>：可以动态地改变对象的属性，同时避免了构造函数过于复杂的情况。</li><li><strong>避免重复代码</strong>：在需要创建大量相似对象时，避免了重复的初始化代码。</li><li><strong>适合复杂对象的创建</strong>：对于一些复杂的对象，原型模式可以简化创建过程，避免重复初始化。</li></ol><p>缺点</p><ol><li><strong>克隆复杂对象时可能存在问题</strong>：如果对象内部包含复杂的引用类型，可能需要进行深克隆，而不是浅克隆。浅克隆只是复制对象的引用，深克隆则需要复制对象的所有属性。</li><li><strong>维护克隆机制的复杂性</strong>：如果对象的结构或字段较为复杂，克隆方法可能变得很复杂，尤其是深拷贝时需要处理的细节较多。</li><li><strong>克隆的对象是否可以正常工作</strong>：某些对象可能依赖于外部状态（例如数据库连接、文件句柄等），复制这些对象时可能会导致错误。</li></ol></li><li><h2 id="适配器模式（Adapter）"><a href="#适配器模式（Adapter）" class="headerlink" title="适配器模式（Adapter）"></a>适配器模式（Adapter）</h2><p><strong>适配器模式</strong>（Adapter Pattern）是一种结构型设计模式，它允许将一个类的接口转换成客户端期望的另一种接口，从而使原本由于接口不兼容而不能一起工作的类可以协同工作。</p><p>假设我们有一个旧的系统，它提供的接口无法直接与新系统兼容，我们可以使用适配器模式来桥接这两个系统。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 目标接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Target</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">request</span><span class="hljs-params">()</span></span>: String<br>&#125;<br><br><span class="hljs-comment">// 源接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Adaptee</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">specificRequest</span><span class="hljs-params">()</span></span>: String &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Specific request&quot;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 适配器类，继承自目标接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Adapter</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> adaptee: Adaptee) : Target &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">request</span><span class="hljs-params">()</span></span>: String &#123;<br>        <span class="hljs-comment">// 转换适配源接口的方法</span><br>        <span class="hljs-keyword">return</span> adaptee.specificRequest()<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> adaptee = Adaptee()<br>    <span class="hljs-keyword">val</span> adapter = Adapter(adaptee)<br><br>    println(adapter.request())  <span class="hljs-comment">// 输出: Specific request</span><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><h2 id="桥接模式（Bridge）"><a href="#桥接模式（Bridge）" class="headerlink" title="桥接模式（Bridge）"></a>桥接模式（Bridge）</h2><p><strong>桥接模式</strong>（Bridge Pattern）是一种结构型设计模式，它旨在将抽象部分与实现部分分离，使它们可以独立地变化。通过使用桥接模式，可以避免多重继承和复杂的类层次结构，提高系统的可扩展性和灵活性。</p><p>桥接模式通过创建一个桥接接口，将抽象部分和实现部分分开，从而使得它们可以独立变化，减少了它们之间的耦合关系。桥接模式有助于避免继承的层次结构过于复杂，提供更灵活的扩展性。</p><p>假设我们有一个绘图程序，它支持多种形状和多种颜色，我们希望能够轻松地扩展新的形状和颜色，而不增加复杂的类继承关系。我们可以使用桥接模式来实现。</p><p>定义颜色接口：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 实现接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Color</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">applyColor</span><span class="hljs-params">()</span></span>: String<br>&#125;<br><br><span class="hljs-comment">// 具体实现类：红色</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedColor</span> : <span class="hljs-type">Color</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">applyColor</span><span class="hljs-params">()</span></span>: String &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Red&quot;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体实现类：蓝色</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BlueColor</span> : <span class="hljs-type">Color</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">applyColor</span><span class="hljs-params">()</span></span>: String &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Blue&quot;</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>定义形状抽象类：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 抽象类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> color: Color) &#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span>: String<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">applyColor</span><span class="hljs-params">()</span></span>: String &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Applying color: <span class="hljs-subst">$&#123;color.applyColor()&#125;</span>&quot;</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>拓展抽象类：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 具体形状：圆形</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span>(color: Color) : Shape(color) &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span>: String &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Drawing Circle&quot;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体形状：方形</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Square</span>(color: Color) : Shape(color) &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span>: String &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Drawing Square&quot;</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//使用桥接模式</span><br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 创建具体的颜色</span><br>    <span class="hljs-keyword">val</span> red = RedColor()<br>    <span class="hljs-keyword">val</span> blue = BlueColor()<br><br>    <span class="hljs-comment">// 创建具体的形状</span><br>    <span class="hljs-keyword">val</span> redCircle = Circle(red)<br>    <span class="hljs-keyword">val</span> blueSquare = Square(blue)<br><br>    <span class="hljs-comment">// 使用桥接模式</span><br>    println(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;redCircle.draw()&#125;</span> and <span class="hljs-subst">$&#123;redCircle.applyColor()&#125;</span>&quot;</span>)  <span class="hljs-comment">// Drawing Circle and Applying color: Red</span><br>    println(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;blueSquare.draw()&#125;</span> and <span class="hljs-subst">$&#123;blueSquare.applyColor()&#125;</span>&quot;</span>)  <span class="hljs-comment">// Drawing Square and Applying color: Blue</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3></li><li><h2 id="过滤器模式（Filter）"><a href="#过滤器模式（Filter）" class="headerlink" title="过滤器模式（Filter）"></a>过滤器模式（Filter）</h2><p><strong>过滤器模式</strong>（Filter Pattern），也称为<strong>标准化模式</strong>（Criteria Pattern），是一种结构型设计模式，它允许通过一系列的过滤条件来处理数据，并最终得到符合要求的结果。该模式通常用于对数据集合进行一系列过滤，简化过滤逻辑，使得过滤操作可以相互独立并进行组合。</p><p>过滤器模式通过组合多个过滤条件来从一组数据中筛选出符合要求的元素。每个过滤器只负责过滤满足某个条件的数据。多个过滤器可以链式组合，从而形成更复杂的过滤条件。</p><ol><li><strong>过滤器接口（Filter）</strong>：定义过滤方法，通常是一个抽象的 <code>filter()</code> 方法，用于过滤数据。</li><li><strong>具体过滤器（ConcreteFilter）</strong>：实现过滤器接口，提供具体的过滤逻辑。</li><li><strong>组合过滤器（CompositeFilter）</strong>：通常将多个过滤器结合起来，形成更复杂的过滤条件。</li><li><strong>目标对象（Target）</strong>：被过滤的数据集合或对象，通常是一个包含元素的列表或集合。</li></ol><p>定义过滤器接口：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">filter</span><span class="hljs-params">(persons: <span class="hljs-type">List</span>&lt;<span class="hljs-type">Person</span>&gt;)</span></span>: List&lt;Person&gt;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>具体过滤器：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 过滤器：根据年龄过滤</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AgeFilter</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> age: <span class="hljs-built_in">Int</span>) : Filter &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">filter</span><span class="hljs-params">(persons: <span class="hljs-type">List</span>&lt;<span class="hljs-type">Person</span>&gt;)</span></span>: List&lt;Person&gt; &#123;<br>        <span class="hljs-keyword">return</span> persons.filter &#123; it.age &gt;= age &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 过滤器：根据性别过滤</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GenderFilter</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> gender: String) : Filter &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">filter</span><span class="hljs-params">(persons: <span class="hljs-type">List</span>&lt;<span class="hljs-type">Person</span>&gt;)</span></span>: List&lt;Person&gt; &#123;<br>        <span class="hljs-keyword">return</span> persons.filter &#123; it.gender == gender &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>使用过滤器：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">data</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-keyword">val</span> name: String, <span class="hljs-keyword">val</span> age: <span class="hljs-built_in">Int</span>, <span class="hljs-keyword">val</span> gender: String)<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 创建一组数据</span><br>    <span class="hljs-keyword">val</span> persons = listOf(<br>        Person(<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&quot;Female&quot;</span>),<br>        Person(<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&quot;Male&quot;</span>),<br>        Person(<span class="hljs-string">&quot;Charlie&quot;</span>, <span class="hljs-number">35</span>, <span class="hljs-string">&quot;Male&quot;</span>),<br>        Person(<span class="hljs-string">&quot;Diana&quot;</span>, <span class="hljs-number">28</span>, <span class="hljs-string">&quot;Female&quot;</span>)<br>    )<br><br>    <span class="hljs-comment">// 创建过滤器</span><br>    <span class="hljs-keyword">val</span> ageFilter = AgeFilter(<span class="hljs-number">30</span>)<br>    <span class="hljs-keyword">val</span> genderFilter = GenderFilter(<span class="hljs-string">&quot;Female&quot;</span>)<br><br>    <span class="hljs-comment">// 使用单个过滤器</span><br>    println(<span class="hljs-string">&quot;People with age &gt;= 30: <span class="hljs-subst">$&#123;ageFilter.filter(persons)&#125;</span>&quot;</span>)<br>    <span class="hljs-comment">// 使用多个过滤器</span><br>    <span class="hljs-keyword">val</span> combinedFilter = genderFilter.and(ageFilter)<br>    println(<span class="hljs-string">&quot;Female people with age &gt;= 30: <span class="hljs-subst">$&#123;combinedFilter.filter(persons)&#125;</span>&quot;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>使用组合过滤器：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 扩展 Filter 接口，提供组合功能</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> Filter.<span class="hljs-title">and</span><span class="hljs-params">(other: <span class="hljs-type">Filter</span>)</span></span>: Filter &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">object</span> : Filter &#123;<br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">filter</span><span class="hljs-params">(persons: <span class="hljs-type">List</span>&lt;<span class="hljs-type">Person</span>&gt;)</span></span>: List&lt;Person&gt; &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span><span class="hljs-symbol">@and</span>.filter(other.filter(persons))<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3></li><li><h2 id="组合模式（Composite）"><a href="#组合模式（Composite）" class="headerlink" title="组合模式（Composite）"></a>组合模式（Composite）</h2><p><strong>组合模式</strong>（Composite Pattern）是一种结构型设计模式，旨在将对象组合成树形结构以表示“部分-整体”层次结构。组合模式使得客户端可以统一对待单个对象和对象集合。它常用于需要处理树形结构的数据或需要将多个对象作为整体进行操作的场景。</p><p>组合模式通过将对象组成树形结构来表示部分和整体的关系。组合模式可以让客户端以一致的方式对待单个对象和对象集合。也就是说，客户端无需区分单个对象和组合对象，它们都可以作为统一的对象来处理。</p><p>假设我们要设计一个图形绘制应用，其中可以绘制单个图形（如圆形、方形），也可以将多个图形组合成一个复合图形进行绘制。我们使用组合模式来组织图形对象。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//定义组件接口</span><br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Graphic</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span><br>&#125;<br><br><span class="hljs-comment">//定义叶子对象（单一图形）</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> : <span class="hljs-type">Graphic</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Drawing a Circle&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> : <span class="hljs-type">Graphic</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Drawing a Rectangle&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-comment">//定义容器对象（复合图形）</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CompositeGraphic</span> : <span class="hljs-type">Graphic</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> graphics = mutableListOf&lt;Graphic&gt;()<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">add</span><span class="hljs-params">(graphic: <span class="hljs-type">Graphic</span>)</span></span> &#123;<br>        graphics.add(graphic)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">remove</span><span class="hljs-params">(graphic: <span class="hljs-type">Graphic</span>)</span></span> &#123;<br>        graphics.remove(graphic)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Drawing Composite Graphic:&quot;</span>)<br>        <span class="hljs-keyword">for</span> (graphic <span class="hljs-keyword">in</span> graphics) &#123;<br>            graphic.draw()<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//使用组合模式</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 创建单个图形</span><br>    <span class="hljs-keyword">val</span> circle = Circle()<br>    <span class="hljs-keyword">val</span> rectangle = Rectangle()<br><br>    <span class="hljs-comment">// 创建复合图形</span><br>    <span class="hljs-keyword">val</span> compositeGraphic = CompositeGraphic()<br>    compositeGraphic.add(circle)<br>    compositeGraphic.add(rectangle)<br><br>    <span class="hljs-comment">// 画出复合图形</span><br>    compositeGraphic.draw()<br><br>    <span class="hljs-comment">// 删除一个图形并重新画出复合图形</span><br>    compositeGraphic.remove(circle)<br>    compositeGraphic.draw()<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3></li><li><h2 id="装饰器模式（Decorator）"><a href="#装饰器模式（Decorator）" class="headerlink" title="装饰器模式（Decorator）"></a>装饰器模式（Decorator）</h2><p><strong>装饰器模式</strong>（Decorator Pattern）是一种结构型设计模式，旨在通过动态地给对象添加额外的功能，而不改变其结构。它是一种对象行为增强的方式，允许在不修改原始对象代码的情况下，增强或改变对象的功能。</p><p>假设我们要设计一个饮料订单系统，其中有基本的饮料（例如，咖啡）以及可以在其上添加不同配料（例如，牛奶、糖、巧克力等）。我们使用装饰器模式来动态地为饮料添加配料。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//定义组件接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Beverage</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">cost</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Double</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">description</span><span class="hljs-params">()</span></span>: String<br>&#125;<br><br><br><span class="hljs-comment">//定义具体组件（基本饮料）</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Coffee</span> : <span class="hljs-type">Beverage</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">cost</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Double</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">5.0</span> <span class="hljs-comment">// 基本咖啡的价格</span><br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">description</span><span class="hljs-params">()</span></span>: String &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Coffee&quot;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tea</span> : <span class="hljs-type">Beverage</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">cost</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Double</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">3.0</span> <span class="hljs-comment">// 基本茶的价格</span><br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">description</span><span class="hljs-params">()</span></span>: String &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Tea&quot;</span><br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//定义装饰器</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CondimentDecorator</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> beverage: Beverage) : Beverage &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">description</span><span class="hljs-params">()</span></span>: String &#123;<br>        <span class="hljs-keyword">return</span> beverage.description() <span class="hljs-comment">// 委托给被装饰的对象</span><br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//定义具体装饰器（牛奶、糖、巧克力等）</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Milk</span>(beverage: Beverage) : CondimentDecorator(beverage) &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">cost</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Double</span> &#123;<br>        <span class="hljs-keyword">return</span> beverage.cost() + <span class="hljs-number">1.0</span> <span class="hljs-comment">// 加牛奶的额外费用</span><br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">description</span><span class="hljs-params">()</span></span>: String &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;beverage.description()&#125;</span> with Milk&quot;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sugar</span>(beverage: Beverage) : CondimentDecorator(beverage) &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">cost</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Double</span> &#123;<br>        <span class="hljs-keyword">return</span> beverage.cost() + <span class="hljs-number">0.5</span> <span class="hljs-comment">// 加糖的额外费用</span><br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">description</span><span class="hljs-params">()</span></span>: String &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;beverage.description()&#125;</span> with Sugar&quot;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chocolate</span>(beverage: Beverage) : CondimentDecorator(beverage) &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">cost</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Double</span> &#123;<br>        <span class="hljs-keyword">return</span> beverage.cost() + <span class="hljs-number">2.0</span> <span class="hljs-comment">// 加巧克力的额外费用</span><br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">description</span><span class="hljs-params">()</span></span>: String &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;beverage.description()&#125;</span> with Chocolate&quot;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//使用</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> beverage: Beverage = Coffee() <span class="hljs-comment">// 创建一杯基本的咖啡</span><br>    println(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;beverage.description()&#125;</span> costs <span class="hljs-subst">$&#123;beverage.cost()&#125;</span>&quot;</span>)<br><br>    <span class="hljs-comment">// 为咖啡添加牛奶</span><br>    beverage = Milk(beverage)<br>    println(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;beverage.description()&#125;</span> costs <span class="hljs-subst">$&#123;beverage.cost()&#125;</span>&quot;</span>)<br><br>    <span class="hljs-comment">// 为咖啡添加糖</span><br>    beverage = Sugar(beverage)<br>    println(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;beverage.description()&#125;</span> costs <span class="hljs-subst">$&#123;beverage.cost()&#125;</span>&quot;</span>)<br><br>    <span class="hljs-comment">// 为咖啡添加巧克力</span><br>    beverage = Chocolate(beverage)<br>    println(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;beverage.description()&#125;</span> costs <span class="hljs-subst">$&#123;beverage.cost()&#125;</span>&quot;</span>)<br>&#125;<br><br><br></code></pre></td></tr></table></figure></li><li><h2 id="外观模式（Facade）"><a href="#外观模式（Facade）" class="headerlink" title="外观模式（Facade）"></a>外观模式（Facade）</h2><p><strong>外观模式</strong>（Facade Pattern）是一种结构型设计模式，旨在为复杂的子系统提供一个统一的接口，以便客户端能够更加简单、方便地使用子系统的功能。外观模式通过将多个复杂的操作封装在一个单独的接口或类中，降低了系统的复杂性，并提高了可维护性。</p><p>外观模式通过创建一个外观类，它封装了子系统的复杂操作，向客户端提供一个简化的接口。客户端可以通过外观类与多个子系统进行交互，而无需了解各个子系统内部的实现细节。</p><p>假设我们正在构建一个家庭影院系统，系统由多个组件组成，例如音响、投影仪、灯光控制、DVD播放器等。通过外观模式，我们可以创建一个简化的接口来控制整个家庭影院，而无需暴露每个组件的复杂操作。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//定义子系统</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Light</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">on</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Turning on the lights&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">off</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Turning off the lights&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Projector</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">on</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Turning on the projector&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">off</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Turning off the projector&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setInput</span><span class="hljs-params">(input: <span class="hljs-type">String</span>)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Setting projector input to: <span class="hljs-variable">$input</span>&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SoundSystem</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">on</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Turning on the sound system&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">off</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Turning off the sound system&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setVolume</span><span class="hljs-params">(volume: <span class="hljs-type">Int</span>)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Setting volume to: <span class="hljs-variable">$volume</span>&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DVDPlayer</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">on</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Turning on the DVD player&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">off</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Turning off the DVD player&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">play</span><span class="hljs-params">(movie: <span class="hljs-type">String</span>)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Playing movie: <span class="hljs-variable">$movie</span>&quot;</span>)<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//创建外观类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HomeTheaterFacade</span>(<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> light: Light,<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> projector: Projector,<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> soundSystem: SoundSystem,<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> dvdPlayer: DVDPlayer<br>) &#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">watchMovie</span><span class="hljs-params">(movie: <span class="hljs-type">String</span>)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Get ready to watch a movie...&quot;</span>)<br>        light.off()<br>        projector.on()<br>        projector.setInput(<span class="hljs-string">&quot;DVD&quot;</span>)<br>        soundSystem.on()<br>        soundSystem.setVolume(<span class="hljs-number">10</span>)<br>        dvdPlayer.on()<br>        dvdPlayer.play(movie)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">endMovie</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Shutting down the movie...&quot;</span>)<br>        dvdPlayer.off()<br>        soundSystem.off()<br>        projector.off()<br>        light.on()<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//客户端使用外观类</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> light = Light()<br>    <span class="hljs-keyword">val</span> projector = Projector()<br>    <span class="hljs-keyword">val</span> soundSystem = SoundSystem()<br>    <span class="hljs-keyword">val</span> dvdPlayer = DVDPlayer()<br><br>    <span class="hljs-keyword">val</span> homeTheater = HomeTheaterFacade(light, projector, soundSystem, dvdPlayer)<br><br>    <span class="hljs-comment">// 客户端通过外观类来观看电影</span><br>    homeTheater.watchMovie(<span class="hljs-string">&quot;Inception&quot;</span>)<br><br>    <span class="hljs-comment">// 客户端通过外观类结束电影</span><br>    homeTheater.endMovie()<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>在 Android 应用程序中，可能需要初始化多个组件或模块（例如，推送通知、第三方 SDK、数据库等）。使用外观模式可以将这些初始化操作封装在一个类中，使得客户端代码更加简洁。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AppInitializer</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> context: Context) &#123;<br><br>    <span class="hljs-comment">// 初始化第三方库和服务</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">initialize</span><span class="hljs-params">()</span></span> &#123;<br>        initializePushNotifications()<br>        initializeDatabase()<br>        initializeAnalytics()<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">initializePushNotifications</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-comment">// 初始化推送通知</span><br>        println(<span class="hljs-string">&quot;Push Notifications Initialized&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">initializeDatabase</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-comment">// 初始化数据库</span><br>        println(<span class="hljs-string">&quot;Database Initialized&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">initializeAnalytics</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-comment">// 初始化分析工具</span><br>        println(<span class="hljs-string">&quot;Analytics Initialized&quot;</span>)<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// 创建 AppInitializer 实例并进行初始化</span><br><span class="hljs-keyword">val</span> appInitializer = AppInitializer(context)<br>appInitializer.initialize()<br></code></pre></td></tr></table></figure></li><li><h2 id="享元模式（Flyweight）"><a href="#享元模式（Flyweight）" class="headerlink" title="享元模式（Flyweight）"></a>享元模式（Flyweight）</h2><p><strong>享元模式</strong>（Flyweight Pattern）是一种结构型设计模式，它通过共享对象来减少内存消耗，从而提高系统性能。享元模式的核心思想是：当对象的数量非常庞大时，通过共享对象来减少内存占用，提高性能。<strong>享元模式的核心是共享对象</strong></p></li><li><h2 id="代理模式（Proxy）"><a href="#代理模式（Proxy）" class="headerlink" title="代理模式（Proxy）"></a>代理模式（Proxy）</h2><p><strong>代理模式</strong>是一种结构型设计模式，它为某个对象提供一个代理对象，以控制对该对象的访问。代理模式可以增加对目标对象的功能，同时对外保持接口的一致性。代理对象可以在访问真实对象之前或之后添加一些额外的操作。</p><p><strong>静态代理</strong><br>代理类在编译时生成，代理类和真实类实现相同的接口。</p><p><strong>动态代理</strong><br>代理类在运行时动态生成，通过反射机制调用目标对象。</p><p>静态代理实现，代理一个网络请求服务：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 抽象主题</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">NetworkService</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">fetchData</span><span class="hljs-params">()</span></span><br>&#125;<br><br><span class="hljs-comment">// 真实主题</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RealNetworkService</span> : <span class="hljs-type">NetworkService</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">fetchData</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Fetching data from the network...&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 代理类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NetworkServiceProxy</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> realService: NetworkService) : NetworkService &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">fetchData</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Proxy: Checking permissions...&quot;</span>)<br>        realService.fetchData()<br>        println(<span class="hljs-string">&quot;Proxy: Logging the request...&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> realService = RealNetworkService()<br>    <span class="hljs-keyword">val</span> proxyService = NetworkServiceProxy(realService)<br>    proxyService.fetchData()<br>&#125;<br><br></code></pre></td></tr></table></figure><p>动态生成代理对象，可以减少重复代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler<br><span class="hljs-keyword">import</span> java.lang.reflect.Method<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy<br><br><span class="hljs-comment">// 抽象主题</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">DatabaseService</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">queryData</span><span class="hljs-params">()</span></span><br>&#125;<br><br><span class="hljs-comment">// 真实主题</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RealDatabaseService</span> : <span class="hljs-type">DatabaseService</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">queryData</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Querying data from the database...&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 动态代理处理器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicProxyHandler</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> target: Any) : InvocationHandler &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">invoke</span><span class="hljs-params">(proxy: <span class="hljs-type">Any</span>?, method: <span class="hljs-type">Method</span>, args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">out</span> <span class="hljs-type">Any</span>&gt;?)</span></span>: Any? &#123;<br>        println(<span class="hljs-string">&quot;Proxy: Pre-processing before method call...&quot;</span>)<br>        <span class="hljs-keyword">val</span> result = method.invoke(target, *(args ?: arrayOfNulls&lt;Any&gt;(<span class="hljs-number">0</span>)))<br>        println(<span class="hljs-string">&quot;Proxy: Post-processing after method call...&quot;</span>)<br>        <span class="hljs-keyword">return</span> result<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> realService = RealDatabaseService()<br><br>    <span class="hljs-comment">// 创建动态代理</span><br>    <span class="hljs-keyword">val</span> proxyInstance = Proxy.newProxyInstance(<br>        realService::<span class="hljs-keyword">class</span>.java.classLoader,<br>        arrayOf(DatabaseService::<span class="hljs-keyword">class</span>.java),<br>        DynamicProxyHandler(realService)<br>    ) <span class="hljs-keyword">as</span> DatabaseService<br><br>    proxyInstance.queryData()<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在android中 retrofit使用的就是动态代理</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 定义网络接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ApiService</span> &#123;<br>    <span class="hljs-meta">@GET(<span class="hljs-string">&quot;users&quot;</span>)</span><br>    <span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getUsers</span><span class="hljs-params">()</span></span>: List&lt;User&gt;<br>&#125;<br><br><span class="hljs-comment">// 创建 Retrofit 实例</span><br><span class="hljs-keyword">val</span> retrofit = Retrofit.Builder()<br>    .baseUrl(<span class="hljs-string">&quot;https://api.example.com/&quot;</span>)<br>    .addConverterFactory(GsonConverterFactory.create())<br>    .build()<br><br><span class="hljs-comment">// 动态生成接口实现</span><br><span class="hljs-keyword">val</span> apiService = retrofit.create(ApiService::<span class="hljs-keyword">class</span>.java)<br><br></code></pre></td></tr></table></figure></li><li><h2 id="模版方法模式（Template-Method）"><a href="#模版方法模式（Template-Method）" class="headerlink" title="模版方法模式（Template Method）"></a>模版方法模式（Template Method）</h2><p>模板方法模式是一种<strong>行为型设计模式</strong>，定义了一个操作中的算法骨架，而将某些步骤的具体实现延迟到子类中。通过这种方式，模板方法使得子类可以在不改变算法结构的前提下重新定义算法的某些特定步骤。</p><p>假设我们有一个制作饮料的过程：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 抽象类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Beverage</span> &#123;<br>    <span class="hljs-comment">// 模板方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">prepare</span><span class="hljs-params">()</span></span> &#123;<br>        boilWater()<br>        addMainIngredient()<br>        pourIntoCup()<br>        addCondiments()<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">boilWater</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Boiling water...&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">addMainIngredient</span><span class="hljs-params">()</span></span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">pourIntoCup</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Pouring into cup...&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">addCondiments</span><span class="hljs-params">()</span></span><br>&#125;<br><br><span class="hljs-comment">// 具体类：制作茶</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tea</span> : <span class="hljs-type">Beverage</span>() &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">addMainIngredient</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Adding tea leaves...&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">addCondiments</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Adding lemon...&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体类：制作咖啡</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Coffee</span> : <span class="hljs-type">Beverage</span>() &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">addMainIngredient</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Adding coffee powder...&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">addCondiments</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Adding sugar and milk...&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> tea = Tea()<br>    tea.prepare()<br><br>    println()<br><br>    <span class="hljs-keyword">val</span> coffee = Coffee()<br>    coffee.prepare()<br>&#125;<br><br></code></pre></td></tr></table></figure><p>android中<code>RecyclerView.Adapter</code> 是模板方法模式的一个典型例子。它提供了固定的流程（如绑定视图和管理数据集），开发者只需要重写特定的步骤即可。</p><p>Android 的 <code>Activity</code> 生命周期也可以看作模板方法模式的实现。系统调用固定的方法顺序，开发者根据需要重写特定方法。</p><p><strong>模板方法</strong>：<code>onCreateViewHolder</code>、<code>onBindViewHolder</code>、<code>getItemCount</code>。</p><p>开发者只需要实现具体的逻辑，而不需要关心整个流程的调用。</p></li><li><h2 id="责任链模式（Chain-of-Responsibility）"><a href="#责任链模式（Chain-of-Responsibility）" class="headerlink" title="责任链模式（Chain of Responsibility）"></a>责任链模式（Chain of Responsibility）</h2><p>责任链模式是一种<strong>行为型设计模式</strong>，允许多个对象按顺序处理请求，直到其中一个对象能够处理它为止。请求发送者并不知道具体由哪个对象处理，而是将请求沿着链传递，动态地决定由谁处理。</p><p>假设有一个系统用来处理不同等级的请求：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 抽象处理者</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Handler</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> nextHandler: Handler? = <span class="hljs-literal">null</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setNext</span><span class="hljs-params">(handler: <span class="hljs-type">Handler</span>)</span></span>: Handler &#123;<br>        nextHandler = handler<br>        <span class="hljs-keyword">return</span> handler<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">handle</span><span class="hljs-params">(request: <span class="hljs-type">Int</span>)</span></span> &#123;<br>        <span class="hljs-keyword">if</span> (canHandle(request)) &#123;<br>            process(request)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            nextHandler?.handle(request)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">canHandle</span><span class="hljs-params">(request: <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Boolean</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">process</span><span class="hljs-params">(request: <span class="hljs-type">Int</span>)</span></span><br>&#125;<br><br><span class="hljs-comment">// 具体处理者 A</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HandlerA</span> : <span class="hljs-type">Handler</span>() &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">canHandle</span><span class="hljs-params">(request: <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>        <span class="hljs-keyword">return</span> request &lt;= <span class="hljs-number">10</span><br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">process</span><span class="hljs-params">(request: <span class="hljs-type">Int</span>)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;HandlerA processed request: <span class="hljs-variable">$request</span>&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体处理者 B</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HandlerB</span> : <span class="hljs-type">Handler</span>() &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">canHandle</span><span class="hljs-params">(request: <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>        <span class="hljs-keyword">return</span> request <span class="hljs-keyword">in</span> <span class="hljs-number">11.</span><span class="hljs-number">.20</span><br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">process</span><span class="hljs-params">(request: <span class="hljs-type">Int</span>)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;HandlerB processed request: <span class="hljs-variable">$request</span>&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体处理者 C</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HandlerC</span> : <span class="hljs-type">Handler</span>() &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">canHandle</span><span class="hljs-params">(request: <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>        <span class="hljs-keyword">return</span> request &gt; <span class="hljs-number">20</span><br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">process</span><span class="hljs-params">(request: <span class="hljs-type">Int</span>)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;HandlerC processed request: <span class="hljs-variable">$request</span>&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> handlerA = HandlerA()<br>    <span class="hljs-keyword">val</span> handlerB = HandlerB()<br>    <span class="hljs-keyword">val</span> handlerC = HandlerC()<br><br>    <span class="hljs-comment">// 创建责任链</span><br>    handlerA.setNext(handlerB).setNext(handlerC)<br><br>    <span class="hljs-comment">// 请求处理</span><br>    <span class="hljs-keyword">val</span> requests = listOf(<span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">25</span>, <span class="hljs-number">30</span>)<br>    <span class="hljs-keyword">for</span> (request <span class="hljs-keyword">in</span> requests) &#123;<br>        handlerA.handle(request)<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在 Android 中的应用，Android 的 <code>View</code> 事件分发机制是责任链模式的典型应用，OkHttp 的拦截器机制也是责任链模式的应用</p></li><li><h2 id="命令模式（Command）"><a href="#命令模式（Command）" class="headerlink" title="命令模式（Command）"></a>命令模式（Command）</h2><p>命令模式是一种<strong>行为型设计模式</strong>，将请求封装成一个对象，使你可以用不同的请求、队列或者日志来参数化对象，同时支持撤销和恢复操作。</p><p>假设你有一个智能家居系统，用户可以通过遥控器操作家电（例如：灯光开关）。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 命令接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Command</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">undo</span><span class="hljs-params">()</span></span> <span class="hljs-comment">// 支持撤销操作</span><br>&#125;<br><br><span class="hljs-comment">// 接收者：灯</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Light</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">turnOn</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Light is ON&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">turnOff</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Light is OFF&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体命令：打开灯</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TurnOnLightCommand</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> light: Light) : Command &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span></span> &#123;<br>        light.turnOn()<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">undo</span><span class="hljs-params">()</span></span> &#123;<br>        light.turnOff()<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体命令：关闭灯</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TurnOffLightCommand</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> light: Light) : Command &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span></span> &#123;<br>        light.turnOff()<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">undo</span><span class="hljs-params">()</span></span> &#123;<br>        light.turnOn()<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 调用者：遥控器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RemoteControl</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> commandHistory = mutableListOf&lt;Command&gt;()<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setCommand</span><span class="hljs-params">(command: <span class="hljs-type">Command</span>)</span></span> &#123;<br>        commandHistory.add(command)<br>        command.execute()<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">undoLastCommand</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">if</span> (commandHistory.isNotEmpty()) &#123;<br>            <span class="hljs-keyword">val</span> lastCommand = commandHistory.removeAt(commandHistory.size - <span class="hljs-number">1</span>)<br>            lastCommand.undo()<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> light = Light()<br>    <span class="hljs-keyword">val</span> turnOnCommand = TurnOnLightCommand(light)<br>    <span class="hljs-keyword">val</span> turnOffCommand = TurnOffLightCommand(light)<br><br>    <span class="hljs-keyword">val</span> remoteControl = RemoteControl()<br><br>    <span class="hljs-comment">// 打开灯</span><br>    remoteControl.setCommand(turnOnCommand)<br><br>    <span class="hljs-comment">// 关闭灯</span><br>    remoteControl.setCommand(turnOffCommand)<br><br>    <span class="hljs-comment">// 撤销操作</span><br>    remoteControl.undoLastCommand()<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在 Android 中的应用中，按钮点击事件、视频播放器控制等都是命令模式</p></li><li><h2 id="观察者模式（Observer）"><a href="#观察者模式（Observer）" class="headerlink" title="观察者模式（Observer）"></a>观察者模式（Observer）</h2><p>观察者模式是一种<strong>行为型设计模式</strong>，它定义了一种<strong>一对多的依赖关系</strong>，当被观察的对象（<code>Subject</code>）状态发生改变时，所有依赖于它的观察者（<code>Observers</code>）都会收到通知并更新</p><ol><li><strong>Subject（被观察者）</strong><ul><li>保存观察者的引用，并提供注册（<code>addObserver</code>）、移除（<code>removeObserver</code>）和通知（<code>notifyObservers</code>）的方法。</li></ul></li><li><strong>Observer（观察者接口）</strong><ul><li>定义更新的接口，所有观察者必须实现此接口。</li></ul></li><li><strong>ConcreteSubject（具体被观察者）</strong><ul><li>实现被观察者接口，维护具体的状态，并在状态改变时通知观察者。</li></ul></li><li><strong>ConcreteObserver（具体观察者）</strong><ul><li>实现观察者接口，具体处理收到的通知。</li></ul></li></ol><p>以天气监测系统为例，<code>WeatherStation</code>（天气站）是被观察者，而手机和网页应用是观察者。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 观察者接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">update</span><span class="hljs-params">(temperature: <span class="hljs-type">Float</span>, humidity: <span class="hljs-type">Float</span>, pressure: <span class="hljs-type">Float</span>)</span></span><br>&#125;<br><br><span class="hljs-comment">// 被观察者接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Subject</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">addObserver</span><span class="hljs-params">(observer: <span class="hljs-type">Observer</span>)</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">removeObserver</span><span class="hljs-params">(observer: <span class="hljs-type">Observer</span>)</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">notifyObservers</span><span class="hljs-params">()</span></span><br>&#125;<br><br><span class="hljs-comment">// 具体被观察者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WeatherStation</span> : <span class="hljs-type">Subject</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> observers = mutableListOf&lt;Observer&gt;()<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> temperature: <span class="hljs-built_in">Float</span> = <span class="hljs-number">0.0f</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> humidity: <span class="hljs-built_in">Float</span> = <span class="hljs-number">0.0f</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> pressure: <span class="hljs-built_in">Float</span> = <span class="hljs-number">0.0f</span><br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">addObserver</span><span class="hljs-params">(observer: <span class="hljs-type">Observer</span>)</span></span> &#123;<br>        observers.add(observer)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">removeObserver</span><span class="hljs-params">(observer: <span class="hljs-type">Observer</span>)</span></span> &#123;<br>        observers.remove(observer)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">notifyObservers</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">for</span> (observer <span class="hljs-keyword">in</span> observers) &#123;<br>            observer.update(temperature, humidity, pressure)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 模拟数据更新</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setMeasurements</span><span class="hljs-params">(temperature: <span class="hljs-type">Float</span>, humidity: <span class="hljs-type">Float</span>, pressure: <span class="hljs-type">Float</span>)</span></span> &#123;<br>        <span class="hljs-keyword">this</span>.temperature = temperature<br>        <span class="hljs-keyword">this</span>.humidity = humidity<br>        <span class="hljs-keyword">this</span>.pressure = pressure<br>        notifyObservers() <span class="hljs-comment">// 数据变化时通知观察者</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体观察者：手机应用</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MobileApp</span> : <span class="hljs-type">Observer</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">update</span><span class="hljs-params">(temperature: <span class="hljs-type">Float</span>, humidity: <span class="hljs-type">Float</span>, pressure: <span class="hljs-type">Float</span>)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;MobileApp - 温度: <span class="hljs-variable">$temperature</span>, 湿度: <span class="hljs-variable">$humidity</span>, 压力: <span class="hljs-variable">$pressure</span>&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体观察者：网页应用</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WebApp</span> : <span class="hljs-type">Observer</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">update</span><span class="hljs-params">(temperature: <span class="hljs-type">Float</span>, humidity: <span class="hljs-type">Float</span>, pressure: <span class="hljs-type">Float</span>)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;WebApp - 温度: <span class="hljs-variable">$temperature</span>, 湿度: <span class="hljs-variable">$humidity</span>, 压力: <span class="hljs-variable">$pressure</span>&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端代码</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> weatherStation = WeatherStation()<br><br>    <span class="hljs-keyword">val</span> mobileApp = MobileApp()<br>    <span class="hljs-keyword">val</span> webApp = WebApp()<br><br>    <span class="hljs-comment">// 注册观察者</span><br>    weatherStation.addObserver(mobileApp)<br>    weatherStation.addObserver(webApp)<br><br>    <span class="hljs-comment">// 模拟天气变化</span><br>    weatherStation.setMeasurements(<span class="hljs-number">25.0f</span>, <span class="hljs-number">65.0f</span>, <span class="hljs-number">1013.0f</span>)<br>    weatherStation.setMeasurements(<span class="hljs-number">27.0f</span>, <span class="hljs-number">70.0f</span>, <span class="hljs-number">1012.0f</span>)<br><br>    <span class="hljs-comment">// 移除观察者</span><br>    weatherStation.removeObserver(webApp)<br><br>    <span class="hljs-comment">// 模拟新数据</span><br>    weatherStation.setMeasurements(<span class="hljs-number">28.0f</span>, <span class="hljs-number">75.0f</span>, <span class="hljs-number">1011.0f</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在 Android Jetpack 的架构中，<code>LiveData</code>、<code>EventBus</code> 、<code>BroadcastReceiver</code>等是观察者模式的典型应用</p></li><li><h2 id="中介者模式（Mediator）"><a href="#中介者模式（Mediator）" class="headerlink" title="中介者模式（Mediator）"></a>中介者模式（Mediator）</h2><p>中介者模式是一种<strong>行为型设计模式</strong>，它通过一个中介对象来封装一组对象之间的交互。中介者模式通过将对象间复杂的网状关系转换为中介者与对象之间的单向关系，来降低对象之间的耦合性，从而更容易实现对象的独立复用。</p><ol><li><strong>Mediator（中介者接口）</strong><ul><li>定义了一个接口，用于通信和协调不同对象之间的交互。</li></ul></li><li><strong>ConcreteMediator（具体中介者）</strong><ul><li>实现中介者接口，协调和管理不同同事对象之间的通信。</li></ul></li><li><strong>Colleague（同事类接口）</strong><ul><li>定义与中介者通信的接口，持有中介者的引用。</li></ul></li><li><strong>ConcreteColleague（具体同事类）</strong><ul><li>实现同事类接口，通过中介者与其他同事类进行通信。</li></ul></li></ol><p>以聊天室为例，中介者负责管理用户之间的消息传递。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 中介者接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ChatMediator</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">sendMessage</span><span class="hljs-params">(msg: <span class="hljs-type">String</span>, sender: <span class="hljs-type">User</span>)</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">addUser</span><span class="hljs-params">(user: <span class="hljs-type">User</span>)</span></span><br>&#125;<br><br><span class="hljs-comment">// 具体中介者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatRoomMediator</span> : <span class="hljs-type">ChatMediator</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> users = mutableListOf&lt;User&gt;()<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">addUser</span><span class="hljs-params">(user: <span class="hljs-type">User</span>)</span></span> &#123;<br>        users.add(user)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">sendMessage</span><span class="hljs-params">(msg: <span class="hljs-type">String</span>, sender: <span class="hljs-type">User</span>)</span></span> &#123;<br>        <span class="hljs-keyword">for</span> (user <span class="hljs-keyword">in</span> users) &#123;<br>            <span class="hljs-comment">// 消息不能发送给自己</span><br>            <span class="hljs-keyword">if</span> (user != sender) &#123;<br>                user.receive(msg)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 同事类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>(<span class="hljs-keyword">val</span> mediator: ChatMediator, <span class="hljs-keyword">val</span> name: String) &#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">send</span><span class="hljs-params">(msg: <span class="hljs-type">String</span>)</span></span><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">receive</span><span class="hljs-params">(msg: <span class="hljs-type">String</span>)</span></span><br>&#125;<br><br><span class="hljs-comment">// 具体同事类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatUser</span>(mediator: ChatMediator, name: String) : User(mediator, name) &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">send</span><span class="hljs-params">(msg: <span class="hljs-type">String</span>)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;<span class="hljs-variable">$name</span> 发送消息: <span class="hljs-variable">$msg</span>&quot;</span>)<br>        mediator.sendMessage(msg, <span class="hljs-keyword">this</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">receive</span><span class="hljs-params">(msg: <span class="hljs-type">String</span>)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;<span class="hljs-variable">$name</span> 收到消息: <span class="hljs-variable">$msg</span>&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端代码</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> mediator = ChatRoomMediator()<br><br>    <span class="hljs-keyword">val</span> user1 = ChatUser(mediator, <span class="hljs-string">&quot;Alice&quot;</span>)<br>    <span class="hljs-keyword">val</span> user2 = ChatUser(mediator, <span class="hljs-string">&quot;Bob&quot;</span>)<br>    <span class="hljs-keyword">val</span> user3 = ChatUser(mediator, <span class="hljs-string">&quot;Charlie&quot;</span>)<br><br>    mediator.addUser(user1)<br>    mediator.addUser(user2)<br>    mediator.addUser(user3)<br><br>    user1.send(<span class="hljs-string">&quot;Hello everyone!&quot;</span>)<br>    user2.send(<span class="hljs-string">&quot;Hi Alice!&quot;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在 Android 中的应用，<code>ViewGroup</code> 充当中介者的角色，它管理和协调子 <code>View</code> 之间的关系；</p><p>Navigation 组件也是中介者模式的典型实现。它负责在不同的 Fragment 之间进行导航，并解耦了 Fragment 与 Activity 的直接关系。</p><p>中介者模式在 Android 中有着广泛的应用，从 UI 控件的布局管理到 Jetpack 的架构组件，提供了解耦和集中管理的优势。通过中介者，可以有效地简化复杂系统中的交互逻辑，同时增强系统的扩展性和可维护性。</p></li><li><h2 id="状态模式（State）"><a href="#状态模式（State）" class="headerlink" title="状态模式（State）"></a>状态模式（State）</h2><p>状态模式是一种<strong>行为型设计模式</strong>，它允许一个对象在其内部状态改变时改变其行为。也就是说，状态模式通过将状态的逻辑分散到状态类中，避免了在对象中使用大量的条件语句来管理状态。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 状态接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ElevatorState</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">pressButton</span><span class="hljs-params">(context: <span class="hljs-type">ElevatorContext</span>)</span></span><br>&#125;<br><br><span class="hljs-comment">// 具体状态：电梯运行中</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MovingState</span> : <span class="hljs-type">ElevatorState</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">pressButton</span><span class="hljs-params">(context: <span class="hljs-type">ElevatorContext</span>)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;电梯正在运行，按钮无效。&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体状态：电梯停止中</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StoppedState</span> : <span class="hljs-type">ElevatorState</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">pressButton</span><span class="hljs-params">(context: <span class="hljs-type">ElevatorContext</span>)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;电梯停止中，开始运行。&quot;</span>)<br>        context.setState(MovingState())<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 上下文类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ElevatorContext</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> state: ElevatorState = StoppedState()<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setState</span><span class="hljs-params">(state: <span class="hljs-type">ElevatorState</span>)</span></span> &#123;<br>        <span class="hljs-keyword">this</span>.state = state<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">pressButton</span><span class="hljs-params">()</span></span> &#123;<br>        state.pressButton(<span class="hljs-keyword">this</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 测试代码</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> elevator = ElevatorContext()<br><br>    elevator.pressButton() <span class="hljs-comment">// 电梯停止中，开始运行。</span><br>    elevator.pressButton() <span class="hljs-comment">// 电梯正在运行，按钮无效。</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>在 Android 中，<code>MediaPlayer</code> 是状态模式的一个实际应用。</p><p>Android 的 View 组件通常具有多种状态，例如 <code>Button</code> 的 <strong>Enabled</strong> 和 <strong>Disabled</strong> 状态</p></li><li><h2 id="策略模式（Strategy）"><a href="#策略模式（Strategy）" class="headerlink" title="策略模式（Strategy）"></a>策略模式（Strategy）</h2><p>策略模式是一种<strong>行为型设计模式</strong>，它定义了一系列算法（策略），并将它们封装到独立的类中，使它们可以互相替换，而不影响使用这些算法的客户端代码。</p><p>策略模式的核心思想是：<strong>将算法的定义与使用分离</strong>，使得客户端能够灵活地选择不同的策略来完成任务。</p><p>以支付系统为例：支持不同的支付方式（如支付宝、微信支付、银行卡支付）。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 策略接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PaymentStrategy</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">pay</span><span class="hljs-params">(amount: <span class="hljs-type">Double</span>)</span></span><br>&#125;<br><br><span class="hljs-comment">// 具体策略：支付宝支付</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AlipayStrategy</span> : <span class="hljs-type">PaymentStrategy</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">pay</span><span class="hljs-params">(amount: <span class="hljs-type">Double</span>)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;使用支付宝支付 <span class="hljs-variable">$amount</span> 元&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体策略：微信支付</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WeChatPayStrategy</span> : <span class="hljs-type">PaymentStrategy</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">pay</span><span class="hljs-params">(amount: <span class="hljs-type">Double</span>)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;使用微信支付 <span class="hljs-variable">$amount</span> 元&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体策略：银行卡支付</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BankCardStrategy</span> : <span class="hljs-type">PaymentStrategy</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">pay</span><span class="hljs-params">(amount: <span class="hljs-type">Double</span>)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;使用银行卡支付 <span class="hljs-variable">$amount</span> 元&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 上下文类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentContext</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> strategy: PaymentStrategy) &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setStrategy</span><span class="hljs-params">(strategy: <span class="hljs-type">PaymentStrategy</span>)</span></span> &#123;<br>        <span class="hljs-keyword">this</span>.strategy = strategy<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">executePayment</span><span class="hljs-params">(amount: <span class="hljs-type">Double</span>)</span></span> &#123;<br>        strategy.pay(amount)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 测试代码</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> paymentContext = PaymentContext(AlipayStrategy())<br><br>    <span class="hljs-comment">// 使用支付宝支付</span><br>    paymentContext.executePayment(<span class="hljs-number">100.0</span>)<br><br>    <span class="hljs-comment">// 切换为微信支付</span><br>    paymentContext.setStrategy(WeChatPayStrategy())<br>    paymentContext.executePayment(<span class="hljs-number">200.0</span>)<br><br>    <span class="hljs-comment">// 切换为银行卡支付</span><br>    paymentContext.setStrategy(BankCardStrategy())<br>    paymentContext.executePayment(<span class="hljs-number">300.0</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>RecyclerView 的 <code>ItemDecoration</code> 是一种灵活的实现策略模式的方式，可以通过不同的 <code>ItemDecoration</code> 策略来设置间距、分隔线等。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomItemDecoration</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> strategy: DecorationStrategy) : RecyclerView.ItemDecoration() &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getItemOffsets</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        outRect: <span class="hljs-type">Rect</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">        view: <span class="hljs-type">View</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">        parent: <span class="hljs-type">RecyclerView</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">        state: <span class="hljs-type">RecyclerView</span>.<span class="hljs-type">State</span></span></span><br><span class="hljs-params"><span class="hljs-function">    )</span></span> &#123;<br>        strategy.decorate(outRect, view, parent, state)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 策略接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">DecorationStrategy</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">decorate</span><span class="hljs-params">(outRect: <span class="hljs-type">Rect</span>, view: <span class="hljs-type">View</span>, parent: <span class="hljs-type">RecyclerView</span>, state: <span class="hljs-type">RecyclerView</span>.<span class="hljs-type">State</span>)</span></span><br>&#125;<br><br><span class="hljs-comment">// 具体策略：设置均等间距</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EqualSpacingStrategy</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> space: <span class="hljs-built_in">Int</span>) : DecorationStrategy &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">decorate</span><span class="hljs-params">(outRect: <span class="hljs-type">Rect</span>, view: <span class="hljs-type">View</span>, parent: <span class="hljs-type">RecyclerView</span>, state: <span class="hljs-type">RecyclerView</span>.<span class="hljs-type">State</span>)</span></span> &#123;<br>        outRect.<span class="hljs-keyword">set</span>(space, space, space, space)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体策略：仅设置底部间距</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BottomSpacingStrategy</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> space: <span class="hljs-built_in">Int</span>) : DecorationStrategy &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">decorate</span><span class="hljs-params">(outRect: <span class="hljs-type">Rect</span>, view: <span class="hljs-type">View</span>, parent: <span class="hljs-type">RecyclerView</span>, state: <span class="hljs-type">RecyclerView</span>.<span class="hljs-type">State</span>)</span></span> &#123;<br>        outRect.<span class="hljs-keyword">set</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, space)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用</span><br><span class="hljs-keyword">val</span> recyclerView: RecyclerView = ...<br>recyclerView.addItemDecoration(CustomItemDecoration(EqualSpacingStrategy(<span class="hljs-number">16</span>)))<br><br></code></pre></td></tr></table></figure></li><li><h2 id="访问者模式（Visitor）"><a href="#访问者模式（Visitor）" class="headerlink" title="访问者模式（Visitor）"></a>访问者模式（Visitor）</h2><p>访问者模式是一种<strong>行为型设计模式</strong>，它允许我们在不改变数据结构（对象模型）的情况下，向结构中的元素添加新的行为（操作）。<br>通过将操作逻辑与对象结构分离，访问者模式实现了对操作的解耦，使得新的操作能够灵活地添加到结构中。</p><p>假设我们有一个应用，其中有不同类型的视图（例如，按钮、文本框和图像），每个视图需要执行不同的操作，比如设置不同的样式或响应不同的事件。我们可以通过访问者模式来集中这些操作。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 访问者接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ViewVisitor</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">visit</span><span class="hljs-params">(button: <span class="hljs-type">ButtonView</span>)</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">visit</span><span class="hljs-params">(textView: <span class="hljs-type">TextViewView</span>)</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">visit</span><span class="hljs-params">(imageView: <span class="hljs-type">ImageViewView</span>)</span></span><br>&#125;<br><br><span class="hljs-comment">// 具体访问者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StyleVisitor</span> : <span class="hljs-type">ViewVisitor</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">visit</span><span class="hljs-params">(button: <span class="hljs-type">ButtonView</span>)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Applying style to Button&quot;</span>)<br>        <span class="hljs-comment">// Apply button style</span><br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">visit</span><span class="hljs-params">(textView: <span class="hljs-type">TextViewView</span>)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Applying style to TextView&quot;</span>)<br>        <span class="hljs-comment">// Apply textview style</span><br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">visit</span><span class="hljs-params">(imageView: <span class="hljs-type">ImageViewView</span>)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Applying style to ImageView&quot;</span>)<br>        <span class="hljs-comment">// Apply imageview style</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 元素接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ViewComponent</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">accept</span><span class="hljs-params">(visitor: <span class="hljs-type">ViewVisitor</span>)</span></span><br>&#125;<br><br><span class="hljs-comment">// 具体元素</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ButtonView</span> : <span class="hljs-type">ViewComponent</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">accept</span><span class="hljs-params">(visitor: <span class="hljs-type">ViewVisitor</span>)</span></span> &#123;<br>        visitor.visit(<span class="hljs-keyword">this</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TextViewView</span> : <span class="hljs-type">ViewComponent</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">accept</span><span class="hljs-params">(visitor: <span class="hljs-type">ViewVisitor</span>)</span></span> &#123;<br>        visitor.visit(<span class="hljs-keyword">this</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageViewView</span> : <span class="hljs-type">ViewComponent</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">accept</span><span class="hljs-params">(visitor: <span class="hljs-type">ViewVisitor</span>)</span></span> &#123;<br>        visitor.visit(<span class="hljs-keyword">this</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 对象结构</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewContainer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> views: MutableList&lt;ViewComponent&gt; = mutableListOf()<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">addView</span><span class="hljs-params">(view: <span class="hljs-type">ViewComponent</span>)</span></span> &#123;<br>        views.add(view)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">applyStyles</span><span class="hljs-params">(visitor: <span class="hljs-type">ViewVisitor</span>)</span></span> &#123;<br>        views.forEach &#123; it.accept(visitor) &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> viewContainer = ViewContainer()<br><br>    <span class="hljs-keyword">val</span> buttonView = ButtonView()<br>    <span class="hljs-keyword">val</span> textViewView = TextViewView()<br>    <span class="hljs-keyword">val</span> imageViewView = ImageViewView()<br><br>    viewContainer.addView(buttonView)<br>    viewContainer.addView(textViewView)<br>    viewContainer.addView(imageViewView)<br><br>    <span class="hljs-comment">// 使用访问者进行样式应用</span><br>    <span class="hljs-keyword">val</span> styleVisitor = StyleVisitor()<br>    viewContainer.applyStyles(styleVisitor)<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><h2 id="迭代器模式（Iterator）"><a href="#迭代器模式（Iterator）" class="headerlink" title="迭代器模式（Iterator）"></a>迭代器模式（Iterator）</h2><p>**迭代器模式（Iterator Pattern）**是一种行为型设计模式，允许客户端访问一个集合对象的元素而不暴露集合对象的内部结构。它提供了一种方法来依次访问集合中的每一个元素，而不需要知道集合的具体实现。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 迭代器接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Iterator</span>&lt;<span class="hljs-type">T</span>&gt; &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Boolean</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">next</span><span class="hljs-params">()</span></span>: T<br>&#125;<br><br><span class="hljs-comment">// 具体迭代器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteIterator</span>&lt;<span class="hljs-type">T</span>&gt;(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> collection: List&lt;T&gt;) : Iterator&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> position = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>        <span class="hljs-keyword">return</span> position &lt; collection.size<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">next</span><span class="hljs-params">()</span></span>: T &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.hasNext()) &#123;<br>            <span class="hljs-keyword">return</span> collection[position++]<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> NoSuchElementException(<span class="hljs-string">&quot;No more elements&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 聚合接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Aggregate</span>&lt;<span class="hljs-type">T</span>&gt; &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">createIterator</span><span class="hljs-params">()</span></span>: Iterator&lt;T&gt;<br>&#125;<br><br><span class="hljs-comment">// 具体聚合</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteAggregate</span>&lt;<span class="hljs-type">T</span>&gt;(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> items: List&lt;T&gt;) : Aggregate&lt;T&gt; &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">createIterator</span><span class="hljs-params">()</span></span>: Iterator&lt;T&gt; &#123;<br>        <span class="hljs-keyword">return</span> ConcreteIterator(items)<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> aggregate = ConcreteAggregate(listOf(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>))<br>    <span class="hljs-keyword">val</span> iterator = aggregate.createIterator()<br><br>    <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>        println(iterator.next())<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在 Android 开发中，迭代器模式通常用于以下场景：</p><ol><li><strong>遍历列表</strong>：例如，RecyclerView 和 ListView 中使用适配器模式进行数据绑定时，可以使用迭代器模式对数据进行遍历。</li><li><strong>遍历视图</strong>：对于动态生成的视图，使用迭代器模式可以更方便地遍历和操作它们。例如，逐一为每个子视图设置样式、事件等。</li><li><strong>多种数据集合的遍历</strong>：当应用中有不同类型的数据集合（例如，List、Set、Map）时，可以统一使用迭代器模式来遍历所有这些集合。</li></ol></li><li><h2 id="备忘录模式（Memento）"><a href="#备忘录模式（Memento）" class="headerlink" title="备忘录模式（Memento）"></a>备忘录模式（Memento）</h2><p>**备忘录模式（Memento Pattern）**是一种行为型设计模式，允许在不暴露对象内部状态的情况下保存和恢复对象的状态。这个模式的目的是在对象状态发生变化时，保存其先前的状态，以便后续可以恢复。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 备忘录类，用于存储对象的状态</span><br><span class="hljs-keyword">data</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Memento</span>(<span class="hljs-keyword">val</span> state: String)<br><br><span class="hljs-comment">// 发起人类，表示需要备份和恢复状态的对象</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Originator</span>(<span class="hljs-keyword">var</span> state: String) &#123;<br><br>    <span class="hljs-comment">// 创建备忘录，保存当前状态</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">createMemento</span><span class="hljs-params">()</span></span>: Memento &#123;<br>        <span class="hljs-keyword">return</span> Memento(state)<br>    &#125;<br><br>    <span class="hljs-comment">// 从备忘录中恢复状态</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">restoreMemento</span><span class="hljs-params">(memento: <span class="hljs-type">Memento</span>)</span></span> &#123;<br>        <span class="hljs-keyword">this</span>.state = memento.state<br>    &#125;<br><br>    <span class="hljs-comment">// 显示当前状态</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">showState</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;State: <span class="hljs-variable">$state</span>&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 负责人类，管理备忘录对象</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Caretaker</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> mementos: MutableList&lt;Memento&gt; = mutableListOf()<br><br>    <span class="hljs-comment">// 保存备忘录</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">addMemento</span><span class="hljs-params">(memento: <span class="hljs-type">Memento</span>)</span></span> &#123;<br>        mementos.add(memento)<br>    &#125;<br><br>    <span class="hljs-comment">// 获取指定位置的备忘录</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getMemento</span><span class="hljs-params">(index: <span class="hljs-type">Int</span>)</span></span>: Memento &#123;<br>        <span class="hljs-keyword">return</span> mementos[index]<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> originator = Originator(<span class="hljs-string">&quot;State 1&quot;</span>) <span class="hljs-comment">// 创建一个发起人对象</span><br>    <span class="hljs-keyword">val</span> caretaker = Caretaker() <span class="hljs-comment">// 创建负责人对象</span><br><br>    originator.showState() <span class="hljs-comment">// 显示当前状态</span><br><br>    <span class="hljs-comment">// 创建并保存备忘录</span><br>    caretaker.addMemento(originator.createMemento())<br><br>    <span class="hljs-comment">// 改变状态</span><br>    originator.state = <span class="hljs-string">&quot;State 2&quot;</span><br>    originator.showState() <span class="hljs-comment">// 显示新状态</span><br><br>    <span class="hljs-comment">// 恢复状态</span><br>    originator.restoreMemento(caretaker.getMemento(<span class="hljs-number">0</span>))<br>    originator.showState() <span class="hljs-comment">// 显示恢复的状态</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>在 Android 开发中，备忘录模式通常应用于以下场景：</p><ol><li><strong>撤销&#x2F;重做功能</strong>：例如，图像编辑器、文本编辑器等应用中，可以通过保存编辑的历史状态来实现撤销和重做功能。<ul><li>例如：在绘图应用中，用户每次操作都生成一个备忘录，在需要撤销时恢复到某个历史状态。</li></ul></li><li><strong>游戏存档和回滚操作</strong>：游戏应用中的存档功能，通过保存游戏的当前状态，可以实现随时恢复游戏进度。<ul><li>例如：每次玩家进入一个新关卡时，可以保存当前的游戏状态，以便于在玩家退出后再次恢复。</li></ul></li><li><strong>复杂的数据表单提交</strong>：在处理复杂表单时，如果用户在提交前需要返回并查看之前的状态，可以通过备忘录保存表单数据的状态。<ul><li>例如：表单中输入的数据、选择的选项等都可以通过备忘录模式进行管理和恢复。</li></ul></li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>build.gradle.kts项目中统一开发版本</title>
    <link href="/2025/01/18/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%BB%9F%E4%B8%80%E5%BC%80%E5%8F%91%E7%89%88%E6%9C%AC/"/>
    <url>/2025/01/18/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%BB%9F%E4%B8%80%E5%BC%80%E5%8F%91%E7%89%88%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h2 id="方式1：最简单的方式"><a href="#方式1：最简单的方式" class="headerlink" title="方式1：最简单的方式"></a>方式1：最简单的方式</h2><p>gradle.properties代码</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs groovy">compileSdkVersion=<span class="hljs-number">33</span><br>minSdkVersion=<span class="hljs-number">21</span><br>targetSdkVersion=<span class="hljs-number">33</span><br></code></pre></td></tr></table></figure><p>在 build.gradle.kts 中引用</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs groovy">android &#123;<br>    compileSdk = property(<span class="hljs-string">&quot;compileSdkVersion&quot;</span>).toString().toInt()<br>    defaultConfig &#123;<br>        minSdk = property(<span class="hljs-string">&quot;minSdkVersion&quot;</span>).toString().toInt()<br>        targetSdk = property(<span class="hljs-string">&quot;targetSdkVersion&quot;</span>).toString().toInt()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方式-2：直接在根级-build-gradle-kts-中定义常量"><a href="#方式-2：直接在根级-build-gradle-kts-中定义常量" class="headerlink" title="方式 2：直接在根级 build.gradle.kts 中定义常量"></a>方式 2：直接在根级 <code>build.gradle.kts</code> 中定义常量</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// 定义全局常量</span><br>val compileSdkVersion = <span class="hljs-number">33</span><br>val minSdkVersion = <span class="hljs-number">21</span><br>val targetSdkVersion = <span class="hljs-number">33</span><br><br>subprojects &#123;<br>    plugins.withId(<span class="hljs-string">&quot;com.android.application&quot;</span>) &#123;<br>        extensions.getByName&lt;com.android.build.gradle.BaseExtension&gt;(<span class="hljs-string">&quot;android&quot;</span>).apply &#123;<br>            compileSdkVersion(compileSdkVersion)<br>            defaultConfig &#123;<br>                minSdk = minSdkVersion<br>                targetSdk = targetSdkVersion<br>            &#125;<br>        &#125;<br>    &#125;<br>    plugins.withId(<span class="hljs-string">&quot;com.android.library&quot;</span>) &#123;<br>        extensions.getByName&lt;com.android.build.gradle.LibraryExtension&gt;(<span class="hljs-string">&quot;android&quot;</span>).apply &#123;<br>            compileSdkVersion(compileSdkVersion)<br>            defaultConfig &#123;<br>                minSdk = minSdkVersion<br>                targetSdk = targetSdkVersion<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p> 所有子模块都会使用这些统一的版本号。  </p><h2 id="方式-3：通过扩展函数封装设置逻辑"><a href="#方式-3：通过扩展函数封装设置逻辑" class="headerlink" title="方式 3：通过扩展函数封装设置逻辑"></a>方式 3：通过扩展函数封装设置逻辑</h2><p> 在根级 <code>build.gradle.kts</code> 中定义一个扩展函数，用于配置 SDK 版本号：  </p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// 定义一个扩展函数</span><br>fun com.android.build.gradle.BaseExtension.applyCommonSdkConfig() &#123;<br>    compileSdkVersion(<span class="hljs-number">33</span>)<br>    defaultConfig &#123;<br>        minSdk = <span class="hljs-number">21</span><br>        targetSdk = <span class="hljs-number">33</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 在子模块中应用扩展函数</span><br>subprojects &#123;<br>    plugins.withId(<span class="hljs-string">&quot;com.android.application&quot;</span>) &#123;<br>        extensions.getByName&lt;com.android.build.gradle.BaseExtension&gt;(<span class="hljs-string">&quot;android&quot;</span>).apply &#123;<br>            applyCommonSdkConfig()<br>        &#125;<br>    &#125;<br>    plugins.withId(<span class="hljs-string">&quot;com.android.library&quot;</span>) &#123;<br>        extensions.getByName&lt;com.android.build.gradle.LibraryExtension&gt;(<span class="hljs-string">&quot;android&quot;</span>).apply &#123;<br>            applyCommonSdkConfig()<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>将上述代码放入根级 <code>build.gradle.kts</code> 文件中,然后确保所有子模块的 <code>build.gradle.kts</code> 文件中正确应用了 <code>com.android.application</code> 或 <code>com.android.library</code> 插件，例如：  </p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs groovy">plugins &#123;<br>    id(<span class="hljs-string">&quot;com.android.application&quot;</span>) <span class="hljs-comment">// 或 id(&quot;com.android.library&quot;)</span><br>    id(<span class="hljs-string">&quot;kotlin-android&quot;</span>)<br>&#125;<br><br>android &#123;<br>    <span class="hljs-comment">// 此处无需再配置 compileSdkVersion、minSdk、targetSdk 等。</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="方式-4：将配置提取到独立的-Kotlin-脚本文件"><a href="#方式-4：将配置提取到独立的-Kotlin-脚本文件" class="headerlink" title="方式 4：将配置提取到独立的 Kotlin 脚本文件"></a>方式 4：将配置提取到独立的 Kotlin 脚本文件</h2><h4 id="1-创建-config-gradle-kts"><a href="#1-创建-config-gradle-kts" class="headerlink" title="1: 创建 config.gradle.kts"></a>1: 创建 <code>config.gradle.kts</code></h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs groovy">val compileSdkVersion = <span class="hljs-number">33</span><br>val minSdkVersion = <span class="hljs-number">21</span><br>val targetSdkVersion = <span class="hljs-number">33</span><br><br>fun com.android.build.gradle.BaseExtension.applyCommonSdkConfig() &#123;<br>    compileSdkVersion(compileSdkVersion)<br>    defaultConfig &#123;<br>        minSdk = minSdkVersion<br>        targetSdk = targetSdkVersion<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-在-build-gradle-kts-中应用这个脚本"><a href="#2-在-build-gradle-kts-中应用这个脚本" class="headerlink" title="2: 在 build.gradle.kts 中应用这个脚本"></a>2: 在 <code>build.gradle.kts</code> 中应用这个脚本</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs groovy">apply(from = <span class="hljs-string">&quot;config.gradle.kts&quot;</span>)<br><br>subprojects &#123;<br>    plugins.withId(<span class="hljs-string">&quot;com.android.application&quot;</span>) &#123;<br>        extensions.getByName&lt;com.android.build.gradle.BaseExtension&gt;(<span class="hljs-string">&quot;android&quot;</span>).apply &#123;<br>            applyCommonSdkConfig()<br>        &#125;<br>    &#125;<br>    plugins.withId(<span class="hljs-string">&quot;com.android.library&quot;</span>) &#123;<br>        extensions.getByName&lt;com.android.build.gradle.LibraryExtension&gt;(<span class="hljs-string">&quot;android&quot;</span>).apply &#123;<br>            applyCommonSdkConfig()<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="方式-5：在-Settings-脚本中统一配置"><a href="#方式-5：在-Settings-脚本中统一配置" class="headerlink" title="方式 5：在 Settings 脚本中统一配置"></a>方式 5：在 Settings 脚本中统一配置</h2><p> 如果项目有多个模块，可以直接在 <code>settings.gradle.kts</code> 中定义扩展属性，供所有模块使用：  </p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pluginManagement &#123;<br>    val compileSdkVersion = <span class="hljs-number">33</span><br>    val minSdkVersion = <span class="hljs-number">21</span><br>    val targetSdkVersion = <span class="hljs-number">33</span><br><br>    <span class="hljs-comment">// 将这些变量导出给所有模块</span><br>    extra[<span class="hljs-string">&quot;compileSdkVersion&quot;</span>] = compileSdkVersion<br>    extra[<span class="hljs-string">&quot;minSdkVersion&quot;</span>] = minSdkVersion<br>    extra[<span class="hljs-string">&quot;targetSdkVersion&quot;</span>] = targetSdkVersion<br>&#125;<br><br></code></pre></td></tr></table></figure><p> 在模块级 <code>build.gradle.kts</code> 中使用：  </p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs groovy">android &#123;<br>    compileSdk = extra[<span class="hljs-string">&quot;compileSdkVersion&quot;</span>] <span class="hljs-keyword">as</span> Int<br>    defaultConfig &#123;<br>        minSdk = extra[<span class="hljs-string">&quot;minSdkVersion&quot;</span>] <span class="hljs-keyword">as</span> Int<br>        targetSdk = extra[<span class="hljs-string">&quot;targetSdkVersion&quot;</span>] <span class="hljs-keyword">as</span> Int<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gradle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>app内图片灰色效果实现</title>
    <link href="/2020/07/25/app%E5%86%85%E5%9B%BE%E7%89%87%E7%81%B0%E8%89%B2%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/"/>
    <url>/2020/07/25/app%E5%86%85%E5%9B%BE%E7%89%87%E7%81%B0%E8%89%B2%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>2020年是令人难忘的一年，新型肺炎的肆虐，给全国人民带来了巨大的灾难。所幸国内的疫情已经受到控制，这次事件值得人们铭记。可以说这次国内能这么快控制住情况，起最大作用的是国家政府的英明决策和前线人员舍生忘死的战斗。向他们致以最高的敬意。</p><p>为悼念新型肺炎牺牲的人员，清明节当天，几乎全网大厂app内效果都变成灰色，作为一个程序员，很好奇一个app是怎么做到全局改变显示效果的。偶然看懂鸿洋的一篇博客，简单记录下实现方式。</p><p>在activity中添加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Paint</span> <span class="hljs-variable">paint</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Paint</span>();<br><span class="hljs-type">ColorMatrix</span> <span class="hljs-variable">colorMatrix</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ColorMatrix</span>();<br>colorMatrix.setSaturation(<span class="hljs-number">0</span>);<br>paint.setColorFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ColorMatrixColorFilter</span>(colorMatrix));<br>getWindow().getDecorView().setLayerType(View.LAYER_TYPE_HARDWARE, paint);<br></code></pre></td></tr></table></figure><p>这样就基本上可以实现app内颜色、图片置灰。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://mp.weixin.qq.com/s/EioJ8ogsCxQEFm44mKFiOQ">App 黑白化实现探索2， 发现了一种更方便的方案，我被锤了！</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>效果</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
